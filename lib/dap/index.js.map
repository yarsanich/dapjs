{"version":3,"sources":["dap/index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;EAqBE;;AA2HF,6BAA4B;AAAnB,oBAAA,GAAG,CAAA","file":"index.js","sourcesContent":["/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n/**\n * DAP interface\n */\nexport interface DAP {\n    /**\n     * Connect to target device\n     * @returns Promise\n     */\n    connect(): Promise<void>;\n\n    /**\n     * Disconnect from target device\n     * @returns Promise\n     */\n    disconnect(): Promise<void>;\n\n    /**\n     * Reconnect to target device\n     * @returns Promise\n     */\n    reconnect(): Promise<void>;\n\n    /**\n     * Reset target device\n     * @returns Promise\n     */\n    reset(): Promise<boolean>;\n\n    /**\n     * Read from a debug port register\n     * @param register ID of register to read\n     * @returns Promise of register value\n     */\n    readDP(register: number): Promise<number>;\n\n    /**\n     * Write to a debug port register\n     * @param register ID of register to write\n     * @param value Value to write\n     * @returns Promise\n     */\n    writeDP(register: number, value: number): Promise<void>;\n\n    /**\n     * Read from an access port register\n     * @param register ID of register to read\n     * @returns Promise of register value\n     */\n    readAP(register: number): Promise<number>;\n\n    /**\n     * Write to an access port register\n     * @param register ID of register to write\n     * @param value Value to write\n     * @returns Promise\n     */\n    writeAP(register: number, value: number): Promise<void>;\n\n    /**\n     * Read a 16-bit word from a memory access port register\n     * @param register ID of register to read\n     * @returns Promise of register data\n     */\n    readMem16(register: number): Promise<number>;\n\n    /**\n     * Write a 16-bit word to a memory access port register\n     * @param register ID of register to write to\n     * @param value The value to write\n     * @returns Promise\n     */\n    writeMem16(register: number, value: number): Promise<void>;\n\n    /**\n     * Read a 32-bit word from a memory access port register\n     * @param register ID of register to read\n     * @returns Promise of register data\n     */\n    readMem32(register: number): Promise<number>;\n\n    /**\n     * Write a 32-bit word to a memory access port register\n     * @param register ID of register to write to\n     * @param value The value to write\n     * @returns Promise\n     */\n    writeMem32(register: number, value: number): Promise<void>;\n\n    /**\n     * Read a block of 32-bit words from a memory access port register\n     * @param register ID of register to read from\n     * @param count The count of values to read\n     * @returns Promise of register data\n     */\n    readBlock(register: number, count: number): Promise<Uint32Array>;\n\n    /**\n     * Write a block of 32-bit words to a memory access port register\n     * @param register ID of register to write to\n     * @param values The values to write\n     * @returns Promise\n     */\n    writeBlock(register: number, values: Uint32Array): Promise<void>;\n\n    /**\n     * Read a block of 32-bit words from a memory access port register\n     * @param register ID of register to read from\n     * @param count The count of values to read\n     * @returns Promise of register data\n     */\n    readBigBlock(register: number, count: number): Promise<Uint32Array>;\n\n    /**\n     * Write a block of 32-bit words to a memory access port register\n     * @param register ID of register to write to\n     * @param values The values to write\n     * @returns Promise\n     */\n    writeBigBlock(register: number, values: Uint32Array): Promise<void>;\n}\n\nexport { ADI } from \"./adi\";\n"],"sourceRoot":"../../src"}