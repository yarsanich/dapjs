{"version":3,"sources":["processor/enums.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;EAqBE;;AA+YF;;;;GAIG;AACH,IAAY,WASX;AATD,WAAY,WAAW;IACnB;;OAEG;IACH,iDAAiB,CAAA;IACjB;;OAEG;IACH,2CAAc,CAAA;AAClB,CAAC,EATW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAStB","file":"enums.js","sourcesContent":["/*\n* DAPjs\n* Copyright Arm Limited 2018\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n/**\n * Processor Core States\n */\nexport const enum CoreState {\n    /**\n     * The core has been reset\n     */\n    RESET,\n    /**\n     * Core is running with a lockup condition\n     */\n    LOCKUP,\n    /**\n     * The core is sleeping\n     */\n    SLEEPING,\n    /**\n     * The core is in debug state\n     */\n    DEBUG,\n    /**\n     * The core is running\n     */\n    RUNNING\n}\n\n/**\n * Processor Core Registers\n * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.100230_0004_00_en/way1435345987733.html\n */\nexport const enum CoreRegister {\n    /**\n     * General purpose register\n     */\n    R0 = 0,\n    /**\n     * General purpose register\n     */\n    R1 = 1,\n    /**\n     * General purpose register\n     */\n    R2 = 2,\n    /**\n     * General purpose register\n     */\n    R3 = 3,\n    /**\n     * General purpose register\n     */\n    R4 = 4,\n    /**\n     * General purpose register\n     */\n    R5 = 5,\n    /**\n     * General purpose register\n     */\n    R6 = 6,\n    /**\n     * General purpose register\n     */\n    R7 = 7,\n    /**\n     * General purpose register\n     */\n    R8 = 8,\n    /**\n     * General purpose register\n     */\n    R9 = 9,\n    /**\n     * General purpose register\n     */\n    R10 = 10,\n    /**\n     * General purpose register\n     */\n    R11 = 11,\n    /**\n     * General purpose register\n     */\n    R12 = 12,\n    /**\n     * Stack Pointer\n     */\n    SP = 13,\n    /**\n     * The Link Register\n     */\n    LR = 14,\n    /**\n     * The Program Counter\n     */\n    PC = 15,\n    /**\n     * The Program Status Register\n     */\n    PSR = 16,\n    /**\n     * Main Stack Pointer\n     */\n    MSP = 17,\n    /**\n     * Process Stack Pointer\n     */\n    PSP = 18,\n    /**\n     * Prevents activation of exceptions\n     */\n    PRIMASK = 20,\n    /**\n     * Controls the stack used\n     */\n    CONTROL = 20\n}\n\n/**\n * Debug Registers\n * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.100165_0201_00_en/ric1417175947147.html\n */\nexport const enum DebugRegister {\n    /**\n     * Debug Fault Status Register\n     */\n    DFSR = 0xE000ED30,\n    /**\n     * Debug Halting Control and Status Register\n     */\n    DHCSR = 0xE000EDF0,\n    /**\n     * Debug Core Register Selector Register, write only\n     */\n    DCRSR = 0xE000EDF4,\n    /**\n     * Debug Core Register Data Register\n     */\n    DCRDR = 0xE000EDF8,\n    /**\n     * Debug Exception and Monitor Control Register\n     */\n    DEMCR = 0xE000EDFC\n}\n\n/**\n * NVIC Registers\n */\nexport const enum NvicRegister {\n    /**\n     * NVIC: Interrupt Controller Type Register\n     */\n    ICT = 0xE000E004,\n    /**\n     * NVIC: CPUID Base Register\n     */\n    CPUID = 0xE000ED00,\n    /**\n     * NVIC: Application Interrupt/Reset Control Register\n     */\n    AIRCR = 0xE000ED0C,\n    /**\n     * NVIC: Debug Fault Status Register\n     */\n    DFSR = 0xE000ED30\n}\n\n/**\n * NVIC: Application Interrupt/Reset Control Register\n * @hidden\n */\nexport const enum AircrMask {\n    /**\n     * Reset Cortex-M (except Debug)\n     */\n    VECTRESET = (1 << 0),\n    /**\n     * Clear Active Vector Bit\n     */\n    VECTCLRACTIVE = (1 << 1),\n    /**\n     * Reset System (except Debug)\n     */\n    SYSRESETREQ = (1 << 2),\n    /**\n     * Write Key\n     */\n    VECTKEY = 0x05FA0000\n}\n\n/**\n * Debug Halting Control and Status Register\n * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0337e/CEGCJAHJ.html\n * @hidden\n */\nexport const enum DhcsrMask {\n    /**\n     * Enables debug\n     */\n    C_DEBUGEN = (1 << 0),\n    /**\n     * Halts the core\n     */\n    C_HALT = (1 << 1),\n    /**\n     * Steps the core in halted debug\n     */\n    C_STEP = (1 << 2),\n    /**\n     * Mask interrupts when stepping or running in halted debug\n     */\n    C_MASKINTS = (1 << 3),\n    /**\n     * Enables Halting debug to gain control\n     */\n    C_SNAPSTALL = (1 << 5),\n    /**\n     * Register Read/Write on the Debug Core Register Selector register is available\n     */\n    S_REGRDY = (1 << 16),\n    /**\n     * The core is in debug state\n     */\n    S_HALT = (1 << 17),\n    /**\n     * Indicates that the core is sleeping\n     */\n    S_SLEEP = (1 << 18),\n    /**\n     * Core is running (not halted) and a lockup condition is present\n     */\n    S_LOCKUP = (1 << 19),\n    /**\n     * An instruction has completed since last read\n     */\n    S_RETIRE_ST = (1 << 24),\n    /**\n     * The core has been reset\n     */\n    S_RESET_ST = (1 << 25),\n    /**\n     * Debug Key\n     */\n    DBGKEY = (0xA05F << 16)\n}\n\n/**\n * Debug Fault Status Register Mask\n * http://infocenter.arm.com/help/topic/com.arm.doc.ddi0413d/Cihdifbf.html\n * @hidden\n */\nexport const enum DfsrMask {\n    /**\n     * Halt request flag\n     */\n    HALTED = (1 << 0),\n    /**\n     * BKPT instruction or hardware breakpoint match\n     */\n    BKPT = (1 << 1),\n    /**\n     * Data Watchpoint (DW) flag\n     */\n    DWTTRAP = (1 << 2),\n    /**\n     * Vector catch occurred\n     */\n    VCATCH = (1 << 3),\n    /**\n     * External debug request (EDBGRQ) has halted the core\n     */\n    EXTERNAL = (1 << 4)\n}\n\n/**\n * Debug Core Register Selector Register Mask\n * http://infocenter.arm.com/help/topic/com.arm.doc.ddi0337e/CEGIAJBH.html\n * @hidden\n */\nexport const enum DcrsrMask {\n    /**\n     * Register write or read, write is 1\n     */\n    REGWnR = (1 << 16),\n    /**\n     * Register select - DebugReturnAddress & PSR/Flags, Execution Number, and state information\n     */\n    REGSEL = 0x1F,\n}\n\n/**\n * Debug Exception and Monitor Control Register Mask\n * http://infocenter.arm.com/help/topic/com.arm.doc.ddi0337e/CEGHJDCF.html\n * @hidden\n */\nexport const enum DemcrMask {\n    /**\n     * Reset Vector Catch\n     */\n    CORERESET = (1 << 0),\n    /**\n     * Debug Trap on MMU Fault\n     */\n    MMERR = (1 << 4),\n    /**\n     * Debug Trap on No Coprocessor Fault\n     */\n    NOCPERR = (1 << 5),\n    /**\n     * Debug Trap on Checking Error Fault\n     */\n    CHKERR = (1 << 6),\n    /**\n     * Debug Trap on State Error Fault\n     */\n    STATERR = (1 << 7),\n    /**\n     * Debug Trap on Bus Error Fault\n     */\n    BUSERR = (1 << 8),\n    /**\n     * Debug Trap on Interrupt Error Fault\n     */\n    INTERR = (1 << 9),\n    /**\n     * Debug Trap on Hard Fault\n     */\n    HARDERR = (1 << 10),\n    /**\n     * Monitor Enable\n     */\n    MON_EN = (1 << 16),\n    /**\n     * Monitor Pend\n     */\n    MON_PEND = (1 << 17),\n    /**\n     * Monitor Step\n     */\n    MON_STEP = (1 << 18),\n    /**\n     * Monitor Request\n     */\n    MON_REQ = (1 << 19),\n    /**\n     * Trace Enable\n     */\n    TRCENA = (1 << 24)\n}\n\n/**\n * Flash Patch and Breakpoint Registers\n * http://infocenter.arm.com/help/topic/com.arm.doc.100165_0201_00_en/ric1417175949176.html\n * @hidden\n */\nexport const enum FPBRegister {\n    /**\n     * FlashPatch Control Register\n     */\n    FP_CTRL = 0xE0002000,\n    /**\n     * FlashPatch Remap Register\n     */\n    FP_REMAP = 0xE0002004,\n    /**\n     * FlashPatch Comparator Register0\n     */\n    FP_COMP0 = 0xE0002008,\n    /**\n     * FlashPatch Comparator Register1\n     */\n    FP_COMP1 = 0xE000200C,\n    /**\n     * FlashPatch Comparator Register2\n     */\n    FP_COMP2 = 0xE0002010,\n    /**\n     * FlashPatch Comparator Register3\n     */\n    FP_COMP3 = 0xE0002014,\n    /**\n     * FlashPatch Comparator Register4\n     */\n    FP_COMP4 = 0xE0002018,\n    /**\n     * FlashPatch Comparator Register5\n     */\n    FP_COMP5 = 0xE000201C,\n    /**\n     * FlashPatch Comparator Register6\n     */\n    FP_COMP6 = 0xE0002020,\n    /**\n     * FlashPatch Comparator Register7\n     */\n    FP_COMP7 = 0xE0002024,\n}\n\n/**\n * Flash Patch and Breakpoint Control Register Mask\n * http://infocenter.arm.com/help/topic/com.arm.doc.ddi0337e/ch11s04s01.html#BABCAFAG\n * @hidden\n */\nexport enum FPBCtrlMask {\n    /**\n     * Flash patch unit enable\n     */\n    ENABLE = (1 << 0),\n    /**\n     * Key field which enables writing to the Flash Patch Control Register\n     */\n    KEY = (1 << 1)\n}\n"],"sourceRoot":"../../src"}